import{_ as e,c as t,o,a3 as a}from"./chunks/framework.DDS4xREW.js";const b=JSON.parse('{"title":"dotpi | documentation","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),i={name:"index.md"},r=a('<h1 id="dotpi-documentation" tabindex="-1">dotpi | documentation <a class="header-anchor" href="#dotpi-documentation" aria-label="Permalink to &quot;dotpi | documentation&quot;">​</a></h1><p>The <em>dotpi</em> ecosystem allows a fleet of Raspberry Pi computers to run distributed applications. There is a focus on audio capabilities with helpers for sound devices.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><p><em>dotpi</em> is set of tools that runs on a server and on each Raspberry Pi, to organise the ensemble.</p><ul><li>configure and install ex. sound card, network</li><li>service: ex. ensure that jackd service always run</li><li>command line tools: ex. install and remove a service</li><li>manager: deploy, run and monitor your project on a fleet of pi</li></ul><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><ul><li>MacOS. It is tested with MacOS. Pull request are welcome for other systems. (The server must be able to run <code>bash</code> and <code>perl</code> scripts.)</li><li>RPi 3 or 4. Let us know if it runs on a Raspberry 5.</li></ul><h2 id="raspberry-pi-computers" tabindex="-1">Raspberry Pi computers <a class="header-anchor" href="#raspberry-pi-computers" aria-label="Permalink to &quot;Raspberry Pi computers&quot;">​</a></h2><p><em>dotpi</em> runs on Rapsberry Pi models 3 and 4, with <code>Raspberry Pi OS</code>. The underlying Debian distribution is <code>Bookworm</code>. It still runs with the previous distribution (<code>Bullseye</code>) but it is not supported. <em>dotpi</em> supports the <code>Lite</code> version of the system (minimal, without graphical interface).</p>',9),s=[r];function n(d,l,c,u,p,m){return o(),t("div",null,s)}const _=e(i,[["render",n]]);export{b as __pageData,_ as default};
