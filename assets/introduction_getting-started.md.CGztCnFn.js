import{_ as s,c as a,o as e,a3 as n}from"./chunks/framework.DDS4xREW.js";const y=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/getting-started.md","filePath":"introduction/getting-started.md"}'),o={name:"introduction/getting-started.md"},t=n(`<h1 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h1><p>In this first guide we will see how to use the <code>dotpi-install</code> tools to setup a Raspberry Pi, and how to monitor and control it remotely using the <code>dotpi-manager</code></p><h2 id="cloning-the-dotpi-install-tools" tabindex="-1">Cloning the <code>dotpi_install</code> tools <a class="header-anchor" href="#cloning-the-dotpi-install-tools" aria-label="Permalink to &quot;Cloning the \`dotpi_install\` tools&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#E6DB74;"> clone https://github.com/ircam-ismm/dotpi-install</span></span></code></pre></div><h2 id="creating-a-project" tabindex="-1">Creating a project <a class="header-anchor" href="#creating-a-project" aria-label="Permalink to &quot;Creating a project&quot;">​</a></h2><p>The repository comes with a set of <em>dotpi</em> project configuration examples that you can see in <code>projects</code> directory. In this guide, we will use the <code>example_development</code> project as a starter for creating a new project. So let&#39;s first copy this directory before exploring the project structure and make some modifications:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#E6DB74;"> path/to/dotpi-install</span></span>
<span class="line"><span style="color:#A6E22E;">cp</span><span style="color:#AE81FF;"> -R</span><span style="color:#E6DB74;"> projects/example-development projects/getting-started</span></span></code></pre></div><p>If you open the project in your favorite editor, you should see the following directory structure:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">getting-started</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> configuration           </span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └── dotpi_project.bash</span></span>
<span class="line"><span style="color:#A6E22E;">└──</span><span style="color:#E6DB74;"> secrets               </span></span>
<span class="line"><span style="color:#A6E22E;">    ├──</span><span style="color:#E6DB74;"> network </span></span>
<span class="line"><span style="color:#A6E22E;">    │</span><span style="color:#E6DB74;">   └── components  </span></span>
<span class="line"><span style="color:#A6E22E;">    ├──</span><span style="color:#E6DB74;"> ssh         </span></span>
<span class="line"><span style="color:#A6E22E;">    │</span><span style="color:#E6DB74;">   ├── id_rsa_dotpi_example</span></span>
<span class="line"><span style="color:#A6E22E;">    │</span><span style="color:#E6DB74;">   └── id_rsa_dotpi_example.pub</span></span>
<span class="line"><span style="color:#A6E22E;">    └──</span><span style="color:#E6DB74;"> dotpi_project.bash</span></span></code></pre></div><p>The directory name should be quite self-explanatory, but, just in case, you should be careful to never share publicly (e.g. on github) the files located into the <code>secrets</code> directory.</p><h3 id="project-public-configuration" tabindex="-1">Project public configuration <a class="header-anchor" href="#project-public-configuration" aria-label="Permalink to &quot;Project public configuration&quot;">​</a></h3><p>Let&#39;s first open the <code>getting-started/configuration/dotpi_project.bash</code> file to change some of the project global setting:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai has-diff vp-code"><code><span class="line diff remove"><span style="color:#F8F8F2;">dotpi_project_name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;example&#39;</span></span>
<span class="line diff add"><span style="color:#F8F8F2;">dotpi_project_name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;getting-started&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># default is yes</span></span>
<span class="line"><span style="color:#F8F8F2;">dotpi_ssh_allow_password_authentication</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;yes&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># no default password:</span></span>
<span class="line"><span style="color:#88846F;"># - keep the one set by the imager</span></span>
<span class="line"><span style="color:#88846F;"># - or override in secrets/dotpi_secrets.bash</span></span>
<span class="line"><span style="color:#F8F8F2;">dotpi_password_hash6</span><span style="color:#F92672;">=</span></span>
<span class="line"><span style="color:#88846F;"># # openssl passwd -6</span></span>
<span class="line"><span style="color:#88846F;"># dotpi_password_hash6=&#39;$6$...&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dotpi_timezone</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;Europe/Paris&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">dotpi_keymap</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;fr&#39;</span></span>
<span class="line"></span>
<span class="line diff remove"><span style="color:#F8F8F2;">dotpi_audio_device</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;HiFiBerry DAC+ ADC Pro&#39;</span></span>
<span class="line diff add"><span style="color:#F8F8F2;">dotpi_audio_device</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;headphone&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># use node.js specific version</span></span>
<span class="line"><span style="color:#88846F;"># default is lts</span></span>
<span class="line"><span style="color:#F8F8F2;">dotpi_node_version</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;lts&#39;</span></span></code></pre></div><ul><li>The <code>dotpi_project_name</code> will mainly define the hostname format of the RPis configured with the project, e.g. <code>dotpi-getting-started-001</code></li><li>The <code>dotpi_audio_device</code> will configure the audio output of your RPi, setting to <code>headphones</code> will disable the HDMI audio output to keep only the default mini jack of the RPi.</li></ul><p>Now that some general information about our project are defined, let&#39;s configure some secrets of the project.</p><h3 id="changing-password" tabindex="-1">Changing password <a class="header-anchor" href="#changing-password" aria-label="Permalink to &quot;Changing password&quot;">​</a></h3><p>First let&#39;s change the password of the RPi. Open the <code>getting-started/secrets/dotpi-secrets.bash</code> bash file and change the password to anything that suits you:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai has-diff vp-code"><code><span class="line"><span style="color:#88846F;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># you should change this</span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">dotpi_password</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;!raspberry&#39;</span></span>
<span class="line diff add"><span style="color:#F8F8F2;">dotpi_password</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;yoursuperpasssword&#39;</span></span></code></pre></div><h3 id="configuring-wifi" tabindex="-1">Configuring WiFi <a class="header-anchor" href="#configuring-wifi" aria-label="Permalink to &quot;Configuring WiFi&quot;">​</a></h3><p>Finally, let&#39;s configure the WiFi connection, so that:</p><ul><li>You will be able to access the RPi through SSH or something</li><li>The RPi will be able to connect to the Internet to install itself in the next step</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that in this first guide, we don&#39;t configure nor use the SSH keys. In very simple settings that could be OK, but it is probable that you will very soon find such functionality rather convenient. See <a href="./../">@todo</a> for further information on that point.</p></div><h2 id="preparing-the-sd-card" tabindex="-1">Preparing the SD Card <a class="header-anchor" href="#preparing-the-sd-card" aria-label="Permalink to &quot;Preparing the SD Card&quot;">​</a></h2><ul><li>install Raspberry Pi OS</li><li>install the project configuration and <em>dotpi</em> tools on the SD Card</li></ul><h2 id="booting-the-raspberry-pi" tabindex="-1">Booting the Raspberry Pi <a class="header-anchor" href="#booting-the-raspberry-pi" aria-label="Permalink to &quot;Booting the Raspberry Pi&quot;">​</a></h2><p>command to check the</p><h2 id="using-the-dotpi-manager" tabindex="-1">Using the <code>dotpi-manager</code> <a class="header-anchor" href="#using-the-dotpi-manager" aria-label="Permalink to &quot;Using the \`dotpi-manager\`&quot;">​</a></h2><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2>`,28),l=[t];function p(i,r,c,d,h,u){return e(),a("div",null,l)}const f=s(o,[["render",p]]);export{y as __pageData,f as default};
